apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: grafana
  labels:
    helm.sh/chart: grafana-7.3.11
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/version: "10.4.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 5
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/instance: grafana
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/instance: grafana
      annotations:
        checksum/config: 0e9cbd0ea8e24e32f7dfca5bab17a2ba05652642f0a09a4882833ae88e4cc4a3
        checksum/sc-dashboard-provider-config: 593c0a8778b83f11fe80ccb21dfb20bc46705e2be3178df1dc4c89d164c8cd9c
        checksum/secret: 7de9d318ffdf70950cd44ebccf8e41bfe4cb55656fb2ec7cd7e4e872a1b36c82
        kubectl.kubernetes.io/default-container: grafana
    spec:

      serviceAccountName: grafana
      automountServiceAccountToken: true
     # securityContext:
     #   fsGroup: 0
     #   runAsGroup: 0
     #   #runAsNonRoot: true
     #   runAsUser: 0
      enableServiceLinks: true
      initContainers:
      - name: init-permissions
        image: busybox:latest
        command: ['sh', '-c', 'mkdir -p /etc/grafana/tls']
        volumeMounts:
        - name: config-cert-key-file
          mountPath: /etc/grafana/tls
          readOnly: false
          #subPath: amp_corp_equinix_com.crt
        #- name: grafana-key-file
        #  mountPath: /etc/grafana/key/amp_corp_equinix_com.key
        #  subPath: amp_corp_equinix_com.key
      containers:
        - name: grafana
          image: "docker.io/grafana/grafana:10.4.1"
          resources:
            limits:
              cpu: 500m
            requests:
              cpu: 150m
          imagePullPolicy: IfNotPresent
          #securityContext:
          securityContext:
           # fsGroup: 472
            #runAsGroup: 472
            runAsNonRoot: false
            runAsUser: 0
           # allowPrivilegeEscalation: false
         #   runAsUser: 0
          #  capabilities:
         #     drop:
        #      - ALL
      #      seccompProfile:
       #       type: RuntimeDefault
          volumeMounts:
            - name: config
              mountPath: "/etc/grafana/grafana.ini"
              subPath: grafana.ini
              readOnly: false
          #  - name: config-cert
             # mountPath: "/etc/grafana"
            #  subPath: amp_corp_equinix_com.cert
           # - name: config-key
          #    mountPath: "/etc/grafana"
         #     subPath: amp_corp_equinix_com.key
            - name: storage
              mountPath: /var/lib/grafana
              readOnly: false
            - name: config-cert-key-file
              mountPath: /etc/grafana/tls
              ###subPath: amp_corp_equinix_com.cert
              readOnly: false         
           # - name: config-cert-key-file
            #  mountPath: /etc/grafana/tls
             # subPath: amp_corp_equinix_com.key
              #readOnly: false

          ports:
            - name: grafana
              containerPort: 3000
              protocol: TCP
            - name: gossip-tcp
              containerPort: 9094
              protocol: TCP
            - name: gossip-udp
              containerPort: 9094
              protocol: UDP
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: grafana
                  key: admin-user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana
                  key: admin-password
            - name: GF_PATHS_DATA
              value: /var/lib/grafana/
            - name: GF_PATHS_LOGS
              value: /var/log/grafana
            - name: GF_PATHS_PLUGINS
              value: /var/lib/grafana/plugins
            - name: GF_PATHS_PROVISIONING
              value: /etc/grafana/provisioning
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 60
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
      volumes:
        - name: config
          configMap:
            name: grafana
        - name: config-cert-key-file
          configMap:
            name: grafana-cert-key-config
      #  - name: config-key
      #    configMap:
      #      name: grafana-key-file
        - name: storage
          persistentVolumeClaim:
            claimName: grafana-nfs-pvc
      dnsConfig:
        nameservers:
          - 1.2.3.4
        searches:
          - grafana.svc.cluster.local
          - svc.cluster.local
          - cluster.local
          #- corp.equinix.com
        options:
          - name: ndots
            value: "2"
      dnsPolicy: None
     # volumes:
      #  - name: config
       #   configMap:
        #    name: grafana
        #- name: storage
        #  emptyDir: {}
